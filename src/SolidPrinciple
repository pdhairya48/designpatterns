Solid Principle

1. Single Responsibility -> There should never be more than one reason for a class to change

2. Open/Closed Loop -> Open for extension, closed for modification.

3. Liskov Substitution Principle -> We should be able to substitute base class objects
 with child class object & this shouldn't alter behaviour/characteristics of a program.

4. Interface Segregation Principle -> Clients should not be forced to depend upon interfaces
that they don't use. { Interface Pollution }

5. Dependency Inversion -> High level modules shouldn't depends upon low level modules. Both
should depend upon abstractions.
 Abstractions shouldn't depend upon details. Details should depend upon abstractions.


 Behavioural Design Pattern descries how classes and objects interact & communicate with each other.